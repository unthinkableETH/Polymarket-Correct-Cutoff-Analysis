import logging
from dune_client.client import DuneClient
import pandas as pd
from collections import deque
from typing import Tuple

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def fetch_data(api_key: str, query_id: int) -> pd.DataFrame:
    try:
        logging.info("Fetching data from Dune Analytics...")
        dune = DuneClient(api_key)
        query_result = dune.get_latest_result(query_id)
        rows = query_result.result.rows
        return pd.DataFrame(rows)
    except Exception as e:
        logging.error(f"Error fetching data: {e}")
        raise

def preprocess_data(df: pd.DataFrame, cutoff_time: str) -> Tuple[pd.DataFrame, pd.DataFrame]:
    logging.info("Preprocessing data...")
    df['transactionTime'] = pd.to_datetime(df['transactionTime']).dt.tz_convert('UTC')
    cutoff_time = pd.Timestamp(cutoff_time, tz='UTC')
    buys = df[(df['transactionType'] == 'Buy') & (df['transactionTime'] < cutoff_time)]
    sells = df[df['transactionType'] == 'Sell']
    return buys, sells

def calculate_profits(buys: pd.DataFrame, sells: pd.DataFrame) -> pd.DataFrame:
    logging.info("Calculating profits...")
    
    results = []
    addresses = buys['address'].unique()

    for address in addresses:
        address_buys = buys[buys['address'] == address]
        address_sells = sells[sells['address'] == address]
        
        total_shares_bought = address_buys['shares'].sum()
        total_cost_bought = address_buys['amountUSDC'].sum()
        weighted_avg_buy_price = total_cost_bought / total_shares_bought

        fifo_queue = deque()
        realized_profit = 0
        total_shares_sold = 0

        transactions = pd.concat([address_buys, address_sells]).sort_values(by='transactionTime')

        for _, row in transactions.iterrows():
            if row['transactionType'] == 'Buy':
                fifo_queue.append((row['shares'], row['pricePerShare']))
            elif row['transactionType'] == 'Sell':
                shares_to_sell = row['shares']
                sell_price = row['pricePerShare']
                while shares_to_sell > 0 and fifo_queue:
                    bought_shares, bought_price = fifo_queue.popleft()
                    if bought_shares <= shares_to_sell:
                        cost_basis = bought_shares * bought_price
                        profit = (sell_price - bought_price) * bought_shares
                        shares_to_sell -= bought_shares
                        total_shares_sold += bought_shares
                    else:
                        cost_basis = shares_to_sell * bought_price
                        profit = (sell_price - bought_price) * shares_to_sell
                        fifo_queue.appendleft((bought_shares - shares_to_sell, bought_price))
                        total_shares_sold += shares_to_sell
                        shares_to_sell = 0
                    realized_profit += profit

        total_unsold_shares = sum(shares for shares, _ in fifo_queue)
        current_value_unsold_shares = total_unsold_shares * 1  # Assuming $1 per share
        cost_basis_unsold_shares = sum(shares * price for shares, price in fifo_queue)
        unrealized_profit = current_value_unsold_shares - cost_basis_unsold_shares
        total_profit = realized_profit + unrealized_profit
        roi = (total_profit / total_cost_bought) * 100 if total_cost_bought > 0 else 0
        percent_shares_sold = (total_shares_sold / total_shares_bought) * 100

        # Apply rounding to avoid extremely small amounts
        total_unsold_shares = 0 if total_unsold_shares < 0.01 else total_unsold_shares
        unrealized_profit = 0 if abs(unrealized_profit) < 0.01 else unrealized_profit
        realized_profit = 0 if abs(realized_profit) < 0.01 else realized_profit
        total_profit = 0 if abs(total_profit) < 0.01 else total_profit
        roi = 0 if abs(roi) < 0.01 else roi

        results.append({
            'address': address,
            'totalSharesBought': total_shares_bought,
            'avgBuyPrice': weighted_avg_buy_price,
            'totalSharesSold': total_shares_sold,
            'avgSellPrice': address_sells['amountUSDC'].sum() / address_sells['shares'].sum() if address_sells['shares'].sum() != 0 else 0,
            'realizedProfit': realized_profit,
            'unrealizedProfit': unrealized_profit,
            'totalProfit': total_profit,
            'ROI': roi,
            'costBasisForAllSharesBought': total_cost_bought,
            'unsoldShares': total_unsold_shares,
            'percentageSharesSold': percent_shares_sold
        })

    return pd.DataFrame(results)

def main():
    api_key = "API_KEY" #<===================================== Insert Dune API Key
    query_id = 4022513 #<===================================Change Query_ID (Must use format that I have laid out at https://dune.com/queries/4022513)
    cutoff_time = '2024-07-23 18:00:00' #<==========================Change Cutoff Date/Time
    
    df = fetch_data(api_key, query_id)
    buys, sells = preprocess_data(df, cutoff_time)
    results = calculate_profits(buys, sells)
    
    results = results.sort_values(by='totalProfit', ascending=False)
    print(results)
    results.to_csv('biden_seen_in_public_today_yes_correct.csv', index=False) #<========================Change File Name

if __name__ == "__main__":
    main()
